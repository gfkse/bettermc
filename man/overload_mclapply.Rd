% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/overload_mclapply.R
\name{overload_mclapply}
\alias{overload_mclapply}
\alias{undo_overload_mclapply}
\title{Overload \code{\link[parallel:mclapply]{parallel::mclapply}} With
\code{\link[bettermc:mclapply]{bettermc::mclapply}}}
\usage{
overload_mclapply(
  parallel_namespace = FALSE,
  parallel_package = FALSE,
  imports = character(),
  defaults = list(),
  fixed_args = list()
)

undo_overload_mclapply(
  parallel_namespace = FALSE,
  parallel_package = FALSE,
  imports = character()
)
}
\arguments{
\item{parallel_namespace}{should \code{mclapply} be overloaded in the
namespace of the parallel package (namespace:parallel)? Use this if the
third-party package calls \code{mclapply} using the double colon operator,
e.g. as in \code{rstan::sampling}.}

\item{parallel_package}{should \code{mclapply} be overloaded on the search
path iff the parallel package is attached (package:parallel)? This should
generally not be required.}

\item{imports}{the name of packages for which \code{mclapply} should be
overloaded in their imports, e.g. "doMC" for doMC:imports. If the package
is not already loaded, it will be loaded first. The special value "all"
means all loaded packages. Use this if the third-party package imports
\code{mclapply} in its NAMESPACE file, e.g. as the doMC package does.}

\item{defaults}{a list named by one or more of the formal arguments of
\code{\link[bettermc:mclapply]{bettermc::mclapply}} providing new defaults
for the overloaded function.}

\item{fixed_args}{a list named by one or more of the formal arguments of
\code{\link[bettermc:mclapply]{bettermc::mclapply}}, which will fix these
to the provided values in the overloaded function.}
}
\value{
These functions return NULL invisibly and are called for their side
  effects.
}
\description{
Enable the use of \code{\link[bettermc:mclapply]{bettermc::mclapply}} by
third-party packages originally using \code{mclapply} from the parallel
package, e.g. doMC or rstan. This is achieved by replacing the
\code{mclapply}-function in various environments.
\code{undo_overload_mclapply} re-installs the original
\code{\link[parallel:mclapply]{parallel::mclapply}}.
}
\section{Windows Support}{
 Fully supported on Windows.
}

\section{Lifecycle}{

  \ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options:
   alt='[Experimental]'}}}{\strong{[Experimental]}}

  It is unlikely that these functions will be accepted on CRAN.
}

\examples{
if (tolower(Sys.info()[["sysname"]]) != "windows") {
  doMC::registerDoMC(2L)

  # fix mc.set.seed arg to NA in order to avoid modifications by doMC:::doMC
  overload_mclapply(imports = "doMC", fixed_args = list(mc.set.seed = NA))

  set.seed(123)
  ret1 <- foreach::`\%dopar\%`(foreach::foreach(i = 1:4), runif(1))
  set.seed(123)
  ret2 <- foreach::`\%dopar\%`(foreach::foreach(i = 1:4), runif(1))
  stopifnot(identical(ret1, ret2))

  undo_overload_mclapply(imports = "doMC")

  # back to using parallel::mclapply under the hood -> seeding has no effect
  set.seed(123)
  ret1 <- foreach::`\%dopar\%`(foreach::foreach(i = 1:4), runif(1))
  set.seed(123)
  ret2 <- foreach::`\%dopar\%`(foreach::foreach(i = 1:4), runif(1))
  stopifnot(!identical(ret1, ret2))
}

}
